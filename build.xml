
<project name="Ecru Build File" default="doall" basedir=".">
<!--TODO: move stuff out of the etc/ dirs... -->
  <!-- ===================== Property Definitions =========================== -->

  <property file="build-local.properties"/>
  <property file="project.properties"/>

  <!-- ==================== File and Directory Names ======================== -->

   <property name="app.name"              value="${project.shortName}"/>
  <property name="context.name"          value="${app.name}"/>
  <property name="jar.name"	         	 value="${app.name}.jar"/>
  <property name="jar.home"	         	 value="lib"/>
  <property name="config.home"	         value="etc/conf"/>
  <property name="compile.dirs"	         value="src"/>
  
  <property name="javadoc.home"          value="javadoc"/>
  <property name="manifest.name"         value="MANIFEST.MF"/>
  <property name="bin.home"				 value="bin" />	
	
  <property name="build.home" value="webapps/${app.name}"/>
  <property name="webinf.home" value="${build.home}/WEB-INF"/>
  
  <!-- ==================== Build 2.0 enhancements ======================== -->
  <!--  we need this in case there's a compile against a jar in the appserver (like servlet.jar) -->

 <property name="appserver.lib"	value="${appserver.lib}"/>	
  <!-- property name="appserver.lib"	value="/usr/local/tomcat7/lib/" -->	
  <property name="war-file" 		value="${app.name}.war" />
  <property name="web-xml-file" 	value="${webinf.home}/web.xml" />

  <property name="deployments.home"	value="${deployments.home}"/>
	
<!-- ===================== Compilation Control Options ==================== -->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="true"/>

<!-- ==================== Compilation Classpath =========================== -->

  <path id="compile.classpath">
    <fileset dir=".">
      <include name="lib/*.jar"/>
      <!-- special for solrj code! -->
      <include name="lib_solrj/*.jar"/>
    </fileset>
  </path>
	
<!-- ==================== Config Target ================================== -->


  <filterset id="blp.filterset"/>

  <target name="init-build-local.properties" if="blp.available" depends="check-build-local.properties">
  	<echo>build-local.properties found</echo>
    <filterset id="blp.filterset">
      <filtersfile file="build-local.properties"/>
    </filterset>
  </target>

  <target name="check-build-local.properties">
    <available file="build-local.properties" type="file" property="blp.available"/>
  </target>
	
  <macrodef name="propertycopy">
    <attribute name="name" />
    <attribute name="from" />
    <sequential>
      <property name="@{name}" value="${@{from}}" />
    </sequential>
  </macrodef>
	
	<target name="run-post-config" if="post-config.available" depends="post-config.check">
		<echo>post-config.sh found...executing</echo>
		<!-- make post-config.sh executable -->	
	     <exec dir="${project.base}/${project.dir}/bin" executable="/bin/chmod">
	       <arg line="+x post-config.sh"/>
	     </exec> 
		<!-- call post-config.sh-->
		<exec executable="${project.base}/${project.dir}/bin/post-config.sh">
		<!-- this is where you'd put any args	<arg line="${arg1}"/>  -->
		</exec>
	</target>
	
	<target name="make-bin-executable" if="bin.present" depends="check-bin">
	    <echo>Making files in ${bin.home} executable</echo>	  	
	  	<apply dir="${bin.home}" executable="/bin/chmod" parallel="false">
	  	    <arg value="700" />
	  	    <fileset dir="${bin.home}">
	  	        <include name="**/*.sh"/>
	  	    </fileset>
	  	</apply>		
	</target>
	 	
  <target name="post-config.check">
  	<echo>checking for bin/post-config.sh</echo>
	<available file="${project.base}/${project.dir}/bin/post-config.sh" type="file" property="post-config.available"/>
  </target>

  <target name="config" depends="init-build-local.properties">

    <dirname property="project.base" file="." />  	
  	<basename property="project.dir" file="." />
  	
    <property name="app.home" value="${project.base}/${project.dir}"/>

  	<echo>project.base: ${project.base}/${project.dir}</echo>
	<echo>config.home: ${config.home}</echo>
  	<echo>bin.home: ${bin.home}</echo>
  	<echo>appserver.lib: ${appserver.lib}</echo>
  	
  	<!-- copy conf/templates/* to conf/ -->
    <copy overwrite="true" todir="${config.home}">
    	<fileset dir="${config.home}/templates"/>
      <filterset refid="blp.filterset"/>
      <filterset>
        <filter token="project.base" value="${project.base}/${project.dir}" />
      	<filtersfile file="project.properties"/>
      </filterset>
    </copy>
	  	  	
  	<!-- copy web.xml.template to web.xml -->
  	<copy overwrite="true" todir="${webinf.home}">
	  	<fileset dir="${webinf.home}">
	  		<include name="*.template"/>
	  	</fileset>
	  	<filterset refid="blp.filterset"/>
	  	<filterset>
	  		<filter token="project.base" value="${project.base}/${project.dir}"/>
	  		<filtersfile file="project.properties"/>
	  	</filterset>
	  	<globmapper from="*.template" to="*"/>
  	</copy>
  	
  	
  	<antcall target="make-bin-executable" />
  	
  	<antcall target="run-post-config" />

  </target>


<!-- ==================== Compile Target ================================== -->

  <target name="compile" if="lib.present" depends="check-lib" description="Compile Java sources">

  	<javac srcdir="${compile.dirs}" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
	  	<classpath>
		  	<path refid="compile.classpath"/>
		  	<fileset dir="${appserver.lib}">
			  	<include name="*.jar"/>
			</fileset>
	  	</classpath>
  	</javac>  	
  	
    <antcall target="create-jar" />
  	
  	<!-- copy all jars from lib/ to WEB-INF/lib -->
	<copy todir="${webinf.home}/lib">
		<fileset dir="lib">
		  	<include name="*.jar"/>
	  	</fileset>
		<fileset dir="lib_solrj">
		  	<include name="*.jar"/>
		</fileset>
  	</copy>
  	
  	<!-- copy all configuration files from conf/ to WEB-INF/classes -->
	<copy todir="${webinf.home}/classes">
		<fileset dir="etc/conf">
		  	<include name="*.properties"/>
			<include name="*.xml"/>
	  	</fileset>
  	</copy>
  	   	
  </target>


<!-- ==================== Clean Target ==================================== -->


  <target name="clean"
   description="Delete old build and dist directories">
    <delete quiet="true">
       <fileset  dir="src" includes="**/*.class"/>
    </delete>
  </target>


<!-- ===================== Create Jar Target ========================== -->

  <target name="create-jar" if="src.present" depends="check-src">
  	<antcall target="create-manifest" />
  	
  	<jar jarfile="${jar.home}/${app.name}.jar" update="true" manifest="${manifest.name}">
     <fileset dir="src">
		   <include name="**/*.class"/>
		   <include name="**/*.java"/>
		   <include name="**/*.properties"/>
		   <include name="**/*.xml"/>
	 </fileset>
    </jar>
  	
  	<antcall target="delete-manifest" />
  </target>

  <target name="create-manifest"
          description="Create the manifest for the jar file">
    
    <condition property="jar.version" 
               value="${cvs.version.major}.${cvs.version.minor}.${cvs.version.micro}">
      <and>
        <isset property="cvs.version.major" />
        <isset property="cvs.version.minor" />
        <isset property="cvs.version.micro" />
      </and>
    </condition>

    <tstamp>
      <format property="timestamp.isoformat"
              pattern="yyyy-MM-dd'T'HH:mm:ss"/>
    </tstamp>

    <condition property="build.timestamp" value="development" else="${timestamp.isoformat}">
      <not>
        <isset property="jar.version" />
      </not>
    </condition>

    <condition property="build.date" value="development" else="${TODAY}">
      <not>
        <isset property="jar.version" />
      </not>
    </condition>

    <condition property="jar.version" value="development">
      <not>
        <isset property="jar.version" />
      </not>
    </condition>

    <manifest file="${manifest.name}">
      <attribute name="Application-Name" value="${project.longName}"/>
      <attribute name="Specification-Title" value="${project.shortName} Java Classes"/>
      <attribute name="Specification-Version" value="${jar.version}"/>
      <attribute name="Implementation-Title" value="${project.package}"/>
      <attribute name="Implementation-Version" value="${jar.version}"/>
      <attribute name="Implementation-Vendor" value="Harvard University Library Library Lab"/>
      <attribute name="Build-Date" value="${build.date}"/>
      <attribute name="Build-Timestamp" value="${build.timestamp}"/>
    </manifest>
  </target>

  <target name="delete-manifest"
          description="Deletes the tmp manifest file">
    <delete quiet="true" file="${manifest.name}" />
  </target>
    
<!-- ==================== Javadoc Target ================================== -->

  <target name="javadoc" description="Create Javadoc API documentation">
    <mkdir dir="${javadoc.home}"/>
    <javadoc destdir="${javadoc.home}" packagenames="*">
	    <fileset dir=".">
			<include name="src/**/*.java"/>
	    </fileset>
	    <classpath refid="compile.classpath"/>
    </javadoc>
  </target>



<!-- ==================== Check and Set Targets =========================== -->

  <target name="check-conf">
    <available file="conf" type="dir" property="conf.present" />
  </target>

  <target name="check-lib">
    <available file="lib" type="dir" property="lib.present" />
  </target>

  <target name="check-src">
    <available file="src" type="dir" property="src.present" />
  </target>
	
  <target name="check-bin">
    <available file="bin" type="dir" property="bin.present" />
  </target>



	
	
	<!-- ====================================== NEW BUILD 2.0 deployment tasks ==================================== -->
	
	<tstamp prefix="build-info">
		<format property="current-date" pattern="d-MMMM-yyyy" locale="en" />
		<format property="current-time" pattern="hh:mm:ss a z" locale="en" />
		<format property="year-month-day" pattern="yyyy-MM-dd" locale="en" />
	</tstamp>	
	<property name="builder" value="LTS" />
	
	<target name="war" depends="config, compile">
			<delete file="webapps/${war-file}" />
			<war warfile="webapps/${war-file}" webxml="${web-xml-file}" duplicate="preserve">
				<classes dir="${webinf.home}/classes">
						<include name="*.properties" />
				</classes>
				<fileset dir="${build.home}" >
					<exclude name="META-INF" />
					<exclude name="WEB-INF" />
			        <exclude name="**/web.xml"/>
				</fileset>
				<lib dir="${webinf.home}/lib/">
					<exclude name="servlet_api.jar"/>
				 </lib>
					
				<manifest>
					<attribute name="Built-By" value="${builder}" />
					<attribute name="Built-On" value="${build-info.current-date}" />
					<attribute name="Built-At" value="${build-info.current-time}" />
				</manifest>
			</war>
	</target>
	
	
	<target name="deploy" description="deploy to jboss/tomcat">
			<echo>deploying ${deployments.home}/${war-file}</echo>
			<copy file="webapps/${war-file}" todir="${deployments.home}" />
	</target>
	
	<target name="undeploy" description="undeploy from tomcat">		
		<echo>deleting ${deployments.home}/${war-file}</echo>
		<delete file="${deployments.home}/${war-file}" />
	</target>
	
	<target name="doall" depends="config,compile,war,deploy" />
	
</project>
